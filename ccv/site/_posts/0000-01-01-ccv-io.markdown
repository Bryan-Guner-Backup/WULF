---
layout: page
lib: ccv
slug: ccv-io
status: publish
title: lib/ccv_io.c
desc: basic IO utilities
categories:
  - lib
---

## ccv_write

    int ccv_write(ccv_dense_matrix_t *mat, char *out, int *len, int type, void *conf)

Write image to a file. This function has soft dependencies on [LibJPEG](http://libjpeg.sourceforge.net/) and [LibPNG](http://www.libpng.org/pub/png/libpng.html). No these libraries, no JPEG nor PNG write support.

- **mat**: The input image.
- **out**: The file name.
- **len**: The output bytes.
- **type**: CCV_IO_PNG_FILE, save to PNG format. CCV_IO_JPEG_FILE, save to JPEG format.
- **conf**: configuration.

## ccv_read

    int ccv_read(const char *in, ccv_dense_matrix_t **x, int type)

Read image from a file. This function has soft dependencies on [LibJPEG](http://libjpeg.sourceforge.net/) and [LibPNG](http://www.libpng.org/pub/png/libpng.html). No these libraries, no JPEG nor PNG read support. However, ccv does support BMP read natively (it is a simple format after all).

- **in**: The file name.
- **x**: The output image.
- **type**: CCV_IO_ANY_FILE, accept any file format. CCV_IO_GRAY, convert to grayscale image. CCV_IO_RGB_COLOR, convert to color image.

## ccv_read

    int ccv_read(const void *data, ccv_dense_matrix_t **x, int type, int size)

Read image from a a region of memory that conforms a specific image format. This function has soft dependencies on [LibJPEG](http://libjpeg.sourceforge.net/) and [LibPNG](http://www.libpng.org/pub/png/libpng.html). No these libraries, no JPEG nor PNG read support. However, ccv does support BMP read natively (it is a simple format after all).

- **data**: The data memory.
- **x**: The output image.
- **type**: CCV_IO_ANY_STREAM, accept any file format. CCV_IO_GRAY, convert to grayscale image. CCV_IO_RGB_COLOR, convert to color image.
- **size**: The size of that data memory region.

## ccv_read

    int ccv_read(const void *data, ccv_dense_matrix_t **x, int type, int rows, int cols, int scanline)

Read image from a region of memory that assumes specific layout (RGB, GRAY, BGR, RGBA, ARGB, RGBA, ABGR, BGRA). By default, this method will create a matrix and copy data over to that matrix. With CCV_IO_NO_COPY, it will create a matrix that has data block pointing to the original data memory region. It is your responsibility to release that data memory at an appropriate time after release the matrix.

- **data**: The data memory.
- **x**: The output image.
- **type**: CCV_IO_ANY_RAW, CCV_IO_RGB_RAW, CCV_IO_BGR_RAW, CCV_IO_RGBA_RAW, CCV_IO_ARGB_RAW, CCV_IO_BGRA_RAW, CCV_IO_ABGR_RAW, CCV_IO_GRAY_RAW. These in conjunction can be used with CCV_IO_NO_COPY.
- **rows**: How many rows in the given data memory region.
- **cols**: How many columns in the given data memory region.
- **scanline**: The size of a single column in the given data memory region (or known as "bytes per row").
